#N canvas 236 146 761 706 10;
#X obj 101 83 zexy;
#X msg 101 59 help;
#X text 430 82 bug-reports: zmoelnig@iem.kug.ac.at;
#X text 428 66 (c) forum::für::umlute 1999-2001;
#N canvas 259 142 708 221 io~ 0;
#X obj 41 184 sfplay;
#X obj 137 185 sfrecord;
#X msg 41 162 help;
#X msg 137 163 help;
#X text 297 186 harddisk-recording tools;
#X text 144 19 input~/output~ objects;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X restore 74 187 pd io~;
#N canvas 320 195 583 254 generators~ 0;
#X obj 125 173 noisi~;
#X msg 125 151 help;
#X msg 29 149 help;
#X msg 125 103 help;
#X msg 29 101 help;
#X obj 29 171 noish~;
#X obj 29 123 dirac~;
#X obj 125 125 step~;
#X text 296 174 bandlimited noise~ generators;
#X text 290 127 scientific test-functions;
#X text 152 26 generator~ objects;
#X connect 1 0 0 0;
#X connect 2 0 5 0;
#X connect 3 0 7 0;
#X connect 4 0 6 0;
#X restore 74 212 pd generators~;
#N canvas 362 224 638 326 processing~ 0;
#X obj 52 93 limiter~;
#X obj 51 143 quantize~;
#X obj 52 193 swap~;
#X msg 51 121 help;
#X msg 52 71 help;
#X msg 52 171 help;
#X text 280 92 a limiter/compressor module;
#X text 121 16 signal~processing objects;
#X text 280 131 quantizes signals by various degrees;
#X text 281 186 byte-swapps a 16bit signal;
#X obj 55 254 z~;
#X msg 55 231 help;
#X text 245 228 a samplewise delay \, great for designing FIR-filters;
#X text 253 247 (you cannot use it for IIR-filters !);
#X connect 3 0 1 0;
#X connect 4 0 0 0;
#X connect 5 0 2 0;
#X connect 11 0 10 0;
#X restore 74 236 pd processing~;
#N canvas 319 68 585 573 analytic~ 0;
#X obj 26 173 sigzero~;
#X msg 26 151 help;
#X text 164 171 detects whether a signal-block is zero throughout or not;
#X obj 25 236 pdf~;
#X msg 25 213 help;
#X text 165 237 get the probability density function of a signal;
#X text 130 48 signal~analyzing objectsd;
#X obj 27 303 envrms~;
#X obj 28 356 avg~;
#X obj 29 407 tavg~;
#X msg 27 282 help;
#X msg 28 335 help;
#X msg 29 386 help;
#X text 158 300 the same as env~ \, except that this outputs rms instead of dB;
#X text 158 356 arithmetic mean of one signal~vector;
#X text 161 407 arithmetic mean between two bangs;
#X msg 31 448 help;
#X obj 31 469 dfreq~;
#X text 164 469 frequency detector;
#X connect 1 0 0 0;
#X connect 4 0 3 0;
#X connect 10 0 7 0;
#X connect 11 0 8 0;
#X connect 12 0 9 0;
#X connect 16 0 17 0;
#X restore 74 261 pd analytic~;
#N canvas 299 114 664 548 others~ 0;
#X obj 31 70 nop~;
#X msg 31 48 help;
#X text 246 63 do_nothing but delay for one-block (useful for synchronising);
#X text 175 11 miscanellous signal~ objects;
#X msg 31 127 help;
#X obj 31 149 pack~;
#X msg 77 128 help;
#X obj 77 150 unpack~;
#X text 245 138 convert a signal to (packages of) floats and vice-versa;
#X obj 31 257 matrix~;
#X msg 31 236 help;
#X msg 31 350 help;
#X msg 32 394 help;
#X obj 31 371 multiplex~;
#X obj 32 415 demultiplex~;
#X msg 109 350 help;
#X msg 110 394 help;
#X obj 109 371 mux~;
#X obj 110 416 demux~;
#X text 240 237 matrix-multiply m IN~signals to n OUT~signals;
#X text 240 250 matrices are interpolated a la line~;
#X text 245 416 multiplex 1 IN~signal to 1-of-n OUT~signals;
#X text 246 369 multiplex 1-of-n IN~signals to 1 OUT~signal;
#X msg 31 297 help;
#X obj 31 319 multiline~;
#X text 239 316 a line~d multiplication for multiple streams;
#X connect 1 0 0 0;
#X connect 4 0 5 0;
#X connect 6 0 7 0;
#X connect 10 0 9 0;
#X connect 11 0 13 0;
#X connect 12 0 14 0;
#X connect 15 0 17 0;
#X connect 16 0 18 0;
#X connect 23 0 24 0;
#X restore 74 332 pd others~;
#X text 289 183 alternative i/o-devices (harddisk \, net \, ...);
#X text 288 207 useful signal generators;
#X text 291 231 process your own signals;
#X text 290 257 and analyze them;
#X text 290 328 none of the above;
#N canvas 0 0 591 430 sigbinops~ 0;
#X obj 81 96 >~;
#X obj 81 129 <~;
#X obj 81 162 ==~;
#X obj 81 244 &&~;
#X obj 81 277 ||~;
#X text 159 95 greater;
#X text 158 131 less;
#X text 157 165 equal;
#X text 156 246 logical AND;
#X text 154 278 logical OR;
#X obj 80 347 abs~;
#X obj 80 375 sgn~;
#X text 158 348 absolute value (I think this is included at GEM too);
#X text 158 375 sign of a function;
#X text 148 32 binary and math operators for signals~;
#X restore 74 286 pd sigbinops~;
#X text 289 284 some mathematical and logical functions that were missing;
#N canvas 345 88 652 713 basic 0;
#X obj 41 28 nop;
#X text 222 28 a do nothing - pass through everything;
#X obj 41 85 lister;
#X obj 98 86 l;
#X text 216 87 store a list (like "float" \, "int" \, ...);
#X text 83 86 ==;
#X obj 40 184 repack;
#X text 211 182 (re)packs atoms to packages of a given size;
#X obj 40 215 packel;
#X text 209 212 the specified element of a list;
#X obj 39 256 niagara;
#X text 214 255 split 1 package into 2 at a specifique point;
#X obj 43 464 segregate;
#X text 210 463 segregates the input to various outputs depending on the type;
#X text 210 117 convert anythings to lists;
#X obj 53 626 matrix;
#X text 211 626 store/create/... matrices;
#X obj 39 336 list2int;
#X text 94 337 ==;
#X obj 112 337 l2i;
#X text 207 339 cast each float of a list/anything to an integer;
#X obj 41 115 any2list;
#X text 98 117 ==;
#X obj 116 117 a2l;
#X obj 41 375 atoi;
#X text 209 373 ascii to integer;
#X obj 39 155 length;
#X text 210 154 get the length of a list;
#X obj 41 291 glue;
#X text 216 285 append a list to another;
#X obj 42 409 list2symbol;
#X text 114 412 ==;
#X obj 129 411 l2s;
#X text 207 410 convert a list into a single symbol;
#X restore 72 416 pd basic control;
#N canvas 401 27 602 871 advanced 0;
#X obj 29 58 tabread4 table;
#X obj 28 189 makesymbol;
#X msg 28 167 help;
#X msg 29 39 help;
#X text 205 56 read out a table doing 4point-interpolation;
#X text 202 189 concatenate lists to formatted symbols;
#X msg 28 214 help;
#X obj 28 236 date;
#X msg 67 214 help;
#X obj 67 236 time;
#X text 201 233 get the current system date/time;
#X obj 28 289 index;
#X msg 28 264 help;
#X text 202 286 map symbols to indices;
#X text 163 565 (no "help"-message available...);
#X obj 28 643 demultiplex;
#X obj 114 643 demux;
#X text 99 644 ==;
#X text 199 644 demultiplex the inlet to a specified outlet;
#X obj 76 696 unfold;
#X obj 28 695 drip;
#X text 58 696 ==;
#X text 201 694 extract the atoms of a package (opt. scheduled);
#X obj 28 745 sort;
#X text 204 748 shell-sort a package of floats;
#X msg 28 338 help;
#X obj 28 362 msgfile;
#X text 197 360 a powerful "textfile" derivative;
#X obj 28 423 mavg;
#X msg 28 403 help;
#X text 200 427 a moving average filter;
#X msg 29 76 help;
#X obj 29 95 tabdump table;
#X text 205 93 dump a table as a list of floats;
#X obj 27 466 mean;
#X msg 27 447 help;
#X msg 26 487 help;
#X obj 26 506 minmax;
#X text 195 463 get the mean value of a list of floats (==vector);
#X text 194 503 get the minimum and the maximum of a vector;
#X obj 29 613 .;
#X text 199 615 scalar multiplication of 2 vectors;
#X msg 30 115 help;
#X obj 30 134 tabset table;
#X text 206 132 set a table with a list of floats;
#X obj 28 809 lp;
#X text 199 805 write data to the (parallel) port (linux only);
#X connect 2 0 1 0;
#X connect 3 0 0 0;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 12 0 11 0;
#X connect 25 0 26 0;
#X connect 29 0 28 0;
#X connect 31 0 32 0;
#X connect 35 0 34 0;
#X connect 36 0 37 0;
#X connect 42 0 43 0;
#X restore 71 446 pd advanced control;
#X text 283 442 some more complex control objects (systime \, tabread4 \, ...);
#X text 282 416 some useful control objects (nop...);
#N canvas 201 65 784 833 matrix 0;
#X obj 74 10 matrix;
#X obj 123 10 mtx;
#X text 188 10 create/store/... matrices;
#X obj 75 128 mtx_eye;
#X obj 75 169 mtx_ones;
#X obj 75 193 mtx_zeros;
#X obj 75 213 mtx_diag;
#X obj 74 262 mtx_trace;
#X obj 69 557 mtx_mul;
#X obj 142 558 mtx_*;
#X obj 68 584 mtx_mul 0;
#X obj 141 586 mtx_* 0;
#X obj 194 586 mtx_.* 0;
#X obj 68 609 mtx_.*;
#X obj 70 494 mtx_add;
#X obj 143 495 mtx_+;
#X obj 70 516 mtx_add 0;
#X obj 143 517 mtx_+ 0;
#X obj 74 288 mtx_transpose;
#X obj 65 707 mtx_check;
#X obj 65 736 mtx_print;
#X text 281 121 identity matrix;
#X text 286 162 matrix (all elements == 1);
#X text 286 185 matrix (all elements == 0);
#X text 282 205 create diagonal matrix out of the diagonal-vector;
#X text 282 216 return the diagonal-vector of a matrix;
#X text 281 256 return the trace of a matrix;
#X text 280 296 transpose a matrix;
#X text 281 489 add two matrices;
#X text 280 513 add a scalar two a matrix;
#X text 293 556 mutiply two matrices;
#X text 292 580 multiply a matrix with a scalar;
#X text 290 609 mutiply two matrices alement by element;
#X text 286 702 check the consistency of a matrix and regenerate it;
#X text 282 734 print a matrix to the stderr;
#X obj 74 40 mtx_element;
#X obj 74 63 mtx_row;
#X obj 74 86 mtx_col;
#X obj 74 400 mtx_resize;
#X obj 73 422 mtx_size;
#X text 284 421 get the size of a matrix;
#X text 283 403 resize a matrix;
#X text 287 38 set elements of a matrix;
#X text 286 61 set rows of a matrix;
#X text 285 87 set columns of a matrix;
#X obj 66 644 mtx_mean;
#X obj 65 671 mtx_rand;
#X text 290 642 get the mean value of each column;
#X text 287 670 fill a matrix with random values;
#X obj 75 149 mtx_egg;
#X text 285 145 identity matrix with rectangular diagonale;
#X obj 75 233 mtx_diegg;
#X text 281 233 like mtx_diag \, but with the diagonale flipped for 90deg;
#X obj 71 455 mtx_inverse;
#X text 277 452 calculate the inverse of a matrix;
#X obj 73 311 mtx_scroll;
#X text 280 316 shift the rows of a matrix;
#X obj 73 330 mtx_roll;
#X text 280 335 shift the column of a matrix;
#X obj 72 363 mtx_pivot;
#X text 281 359 pivot-transform a matrix;
#X restore 69 500 pd matrix control;
#X text 284 497 some objects to work with matrices;
#X text 228 7 the zexy external v1.0;
#X connect 1 0 0 0;
