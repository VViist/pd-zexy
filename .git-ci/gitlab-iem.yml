###################################################
### configuration templates (to be used for snapshot and release builds)
variables:
  PDVERSION: 0.48-1

.build:snapshot: &snapshot
  except:
    - tags
  artifacts: &snapshot_artifacts
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - "${CI_PROJECT_NAME}"
    expire_in: 1 week

.build:release: &release
  only:
    - tags
  artifacts: &release_artifacts
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - "${CI_PROJECT_NAME}"

.build:linux: &build_linux
  image: gcc
  stage: build
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends automake autoconf make
    - apt-get install -y --no-install-recommends puredata-dev puredata-core
  script:
    - autoreconf -fiv
    - ./configure
    - make
    - make check VERBOSE=1
    - make install DESTDIR=$(pwd) libdir=/

.build:macos: &build_macos
  tags:
     - osx
  stage: build
  before_script:
    - wget -q -O Pd.tgz http://msp.ucsd.edu/Software/pd-${PDVERSION}.mac.tar.gz
    - rm -rf "/tmp/pd"
    - mkdir -p "/tmp/pd"
    - tar --strip-components=1 -xf Pd.tgz -C /tmp/pd/
  script:
    - autoreconf -fiv
    - ./configure --with-pd=/tmp/pd/Contents/Resources/ || cat config.log
    - make
    - make install DESTDIR=$(pwd) libdir=/

.build:w32: &build_w32
  stage: build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw32
  before_script:
    - wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.msw.zip
    - rm -rf "/tmp/pd"; mkdir -p "/tmp/pd"
    - unzip -q Pd.zip -d "/tmp/pd"
    - mv -v "/tmp/pd"/*/* "/tmp/pd"
  script:
    - autoreconf -fiv
    - ./configure --with-extension=m_i386 --with-pd=/tmp/pd || cat config.log
    - make LDFLAGS="-L/tmp/pd/bin -Wl,-l:pd.dll -Wl,-lregex" # configure fails to properly detect pd.dll and libregex
    - make install DESTDIR=$(pwd) libdir=/

.build:w64: &build_w64
  stage: build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw64
  before_script:
    - wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.windows.64bit.zip
    - rm -rf "/tmp/pd"; mkdir -p "/tmp/pd"
    - unzip -q Pd.zip -d "/tmp/pd"
    - mv -v "/tmp/pd"/*/* "/tmp/pd"
  script:
    - autoreconf -fiv
    - ./configure --with-pd=/tmp/pd || cat config.log
    - make LDFLAGS="-L/tmp/pd/bin -Wl,-l:pd.dll" # configure fails to properly detect pd.dll
    - make install DESTDIR=$(pwd) libdir=/

###################################################
### the actual jobs: (linux,macos,windows)*(release,snapshot)

Linux:
  <<: *build_linux
  <<: *release
Darwin:
  <<: *build_macos
  <<: *release
W32:
  <<: *build_w32
  <<: *release
W64:
  <<: *build_w64
  <<: *release


Linux_snapshot:
  <<: *build_linux
  <<: *snapshot
Darwin_snapshot:
  <<: *build_macos
  <<: *snapshot
W32_snapshot:
  <<: *build_w32
  <<: *snapshot
W64_snapshot:
  <<: *build_w64
  <<: *snapshot


deken:
  stage: deploy
  image: debian:buster
  only:
    - tags
  variables:
    DEKEN_ROOT: "yes"
  before_script:
    - apt-get update && apt-get --no-install-recommends -y install deken
  script:
    - git archive --format=tar --prefix=tmp/${CI_PROJECT_NAME}/ HEAD | tar xf -
    - deken package --version="${CI_COMMIT_TAG#v}" "tmp/${CI_PROJECT_NAME}"
    - deken package --version="${CI_COMMIT_TAG#v}" "${CI_PROJECT_NAME}"
    - test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
